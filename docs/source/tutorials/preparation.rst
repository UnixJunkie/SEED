.. _lig_from_pdb:

Ligand Preparation from a PDB 
=============================

In this to tutorial we will learn hot to prepare a ligand for SEED docking 
starting from a PDB file. This can be useful in a typical redocking experiment
scenario.
Let us assume for this case that you know the protonation state and the conformation 
of your ligand and you don't want to change them.

After you have extracted the ligand from the pdb file, convert it to mol2 format:
::
  
  obabel -ipdb lig.pdb -p 7.4 -omol2 > lig.mol2
  
Check carefully the protonation state and verify that you are really getting 
the molecule you want as the automatic detection of bonds from a pdb file is not 
always correct.

Now clean the mol2 file:
::
  
  python ${PYTHONSCRIPTS}/mol2_cleaner.py lig.mol2

Generate the CGenFF parameters for the ligand:
::
  
  cgenff lig.mol2 > lig.str

Combine ``lig.mol2`` with the charges and atom types from the CGenFF stream file:
::
  
  python ${PYTHONSCRIPTS}/mol2ori_to_mol2seed4_cgenff4_singlefiles.py lig.mol2 lig.str out.mol2

Protein Preparation
===================

In this tutorial we will learn how to prepare a receptor for SEED docking.
We assume here that the starting point is a protein from the PDB 
with a ligand inside the protein binding pocket and some structural water molecules 
we want to keep. 
In order to start, select the chains that interest you and save them in 3 files: 

#.  ``protein.pdb`` 
#.  ``waters.pdb`` containing explicit waters you want to keep
#.  ``ligand.pdb`` containing a ligand, in order to minimize the protein 
    in presence of the ligand.
    
Prepare the ligand mol2 and stream file as in Tutorial :ref:`lig_from_pdb`.  Here we also reconvert 
the mol2 used for generating the stream file to a PDB 
(so that the residue name, indices, atom names, ... are identical in the PDB and 
STR we will give to CHARMM)
::
    
  obabel -imol2 lig.mol2 -opdb > lig.pdb

Prepare a CHARMM-proof protein PDB file (CHARMM naming convention for atom and residues): 

* Extract the protein chain of interest and run ``psfgen`` on it.
  psfgen is a plugin for VMD and information about it can be found at `<http://www.ks.uiuc.edu/Research/vmd/plugins/psfgen/>`_ 

  The input file for psfgen ``psf_protein.gen`` (I/O to be adapted) is 
  distributed in the repository.
  To avoid any problems with CHARMM, renumber residues from 1. 
  (you can use the python script ``PDB_cleaner_protein.py`` for this task).

Prepare a CHARMM  explicit structural water molecules PDB file: this is the same 
as for the protein, but using ``psf_waters.gen`` as input to psfgen.
Once again, to avoid any problems, renumber residues from 1.

The described steps can be done by running:
::
  
  python ${PYTHONSCRIPTS}/PDB_cleaner_protein.py prot.pdb out.pdb
  psfgen psf_protein.gen > log_protein
  psfgen psf_waters.gen > log_waters
  
Good alternatives to prepare a CHARMM-proof receptor file are to use the 
`CHARMM-GUI <http://www.charmm-gui.org/>`_ web server 
or the `CAMPARI <http://campari.sourceforge.net/>`_ software package (using keyword
PDB_W_CONV 3 to write CHARMM compatible pdb files).

Now run the minimization with CHARMM (see file ``H_min.inp``).
Watch out to replace all the I/O names and paths properly in the file.
Also pay attention to set the correct number of water molecules.
::
  
  charmm < H_min.inp > log

Extract the protein and water chains from ``receptor_min.pdb`` and convert it 
to a mol2 file (we use UCSF Chimera for this task, as up to our knowledge, 
UCSF Chimera is one of the only few free tools that can "perfectly" handle a mol2 
file of a protein).
::
  
  chimera prot_water.pdb 

In the GUI of Chimera click on File => Save Mol2. Be sure to check 
"Use untransformed coordinates" and nothing else;
then enter the file name and save.

Always check that you have what you expected and wanted in output!

Now run the script to change the atom charges and atom types to the ones taken from
CHARMM force field and contained in the file ``top_all36_prot.rtf``.
::
  
  python ${PYTHONSCRIPTS}/mol2tripos_to_seed_protein.py prot_water.mol2 ${CHARMMFILES}/top_all36_prot.rtf out_forseed.mol2

Pay attention that this script retrieves atom types and charges 
ONLY if the atom names in the mol2 file are consistent with the CHARMM topology file.
TIP3 waters are also recognized, but the terminii are not. 
This means that for the moment you have to fix by hand the few atom types 
and atom charges corresponding to your terminii (charged, capped...). 
An alternative is to copy atom names and partial charges to the mol2 file taking 
them directly from the psf topology file generated by psfgen.

Library Preparation
===================
